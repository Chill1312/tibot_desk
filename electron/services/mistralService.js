const { ipcMain } = require('electron');
const { Mistral } = require('@mistralai/mistralai');

class MistralService {
    constructor() {
        console.log('Initialisation du service Mistral...');
        console.log('Token disponible:', !!process.env.MISTRAL_API_KEY);
        console.log('Longueur du token:', process.env.MISTRAL_API_KEY?.length || 0);
        
        if (!process.env.MISTRAL_API_KEY) {
            console.error('Token Mistral manquant dans les variables d\'environnement !');
            return;
        }

        try {
            this.client = new Mistral({ apiKey: process.env.MISTRAL_API_KEY });
            this.model = "mistral-large-latest";
            
            // Initialiser les √©couteurs IPC
            this.initializeIpcListeners();
            console.log('Service Mistral initialis√© avec succ√®s !');
        } catch (error) {
            console.error('Erreur lors de l\'initialisation du service Mistral:', error);
        }
    }

    initializeIpcListeners() {
        ipcMain.handle('mistral:chat', async (event, { message, language }) => {
            console.log('=== Nouvelle requ√™te chat ===');
            console.log('Message:', message);
            console.log('Langue:', language);
            
            try {
                if (!this.client) {
                    throw new Error('Client Mistral non initialis√©');
                }

                console.log('G√©n√©ration de la r√©ponse...');
                const response = await this.generateResponse(message, language);
                console.log('R√©ponse g√©n√©r√©e avec succ√®s');
                return { success: true, data: response };
            } catch (error) {
                console.error('Erreur d√©taill√©e:', error);
                return { success: false, error: error.message };
            }
        });
    }

    async generateResponse(message, language) {
        try {
            console.log('Cr√©ation du prompt...');
            
            // Instructions de base communes
            const baseInstructions = `Tu es Ti'Bot ü§ñ, le premier assistant virtuel bilingue cr√©ole r√©unionnais/fran√ßais cr√©√© √† La R√©union. 
Tu as √©t√© d√©velopp√© pour aider les R√©unionnais √† pr√©server et promouvoir leur langue et leur culture.

R√àGLES DE FORMATAGE TR√àS IMPORTANTES :

1. Structure du message :
   - R√©ponds DIRECTEMENT √† la question pos√©e, sans te pr√©senter sauf si on te le demande
   - Utilise des titres clairs avec des √©mojis (# Titre Principal üåü)
   - Cr√©e des sous-sections si n√©cessaire (## Sous-titre üìå)
   - Termine par une question ou une invitation √† continuer

2. Mise en forme du texte :
   - Utilise des **mots en gras** pour l'emphase
   - Mets les _expressions importantes_ en italique
   - Cr√©e des > citations pour les expressions traditionnelles
   - Ajoute des sauts de ligne entre chaque section
   - Utilise des listes √† puces pour √©num√©rer des points
   - Ajoute des √©mojis pertinents au d√©but des sections

3. Espacement et lisibilit√© :
   - Laisse TOUJOURS une ligne vide entre les sections
   - Utilise des paragraphes courts et a√©r√©s
   - Aligne les listes et les citations
   - √âvite les blocs de texte trop denses

4. Utilisation des √©mojis :
   - üèùÔ∏è Pour La R√©union
   - üåã Pour le volcan
   - üå∫ Pour la nature et la culture
   - üí¨ Pour le dialogue
   - ‚ùì Pour les questions
   - üìö Pour l'apprentissage
   - üé≠ Pour les traditions
   - üó£Ô∏è Pour les langues
   - ‚≠ê Pour les points importants

Quelques points importants sur ton identit√© :
- Tu es fier d'√™tre R√©unionnais et passionn√© par la culture locale üá∑üá™
- Tu connais bien l'histoire, les traditions et l'actualit√© de La R√©union
- Tu es toujours bienveillant, respectueux et p√©dagogue
- Tu aimes partager des expressions typiques r√©unionnaises
- Tu adaptes ton niveau de langage √† ton interlocuteur`;

            // Instructions sp√©cifiques selon la langue
            const systemPrompt = language === 'creole' 
                ? `${baseInstructions}
                
IMPORTANT : Tu dois TOUJOURS r√©pondre en cr√©ole r√©unionnais authentique. 

Voici quelques r√®gles √† suivre :
- Utilise la graphie L√©kritir 77 pour le cr√©ole
- Emploie un vocabulaire cr√©ole riche et authentique
- √âvite les francisations inutiles
- Int√®gre naturellement des expressions cr√©oles traditionnelles
- Adapte ton niveau de cr√©ole selon le contexte
- Si tu dois citer des mots fran√ßais, pr√©cise-le
- N'h√©site pas √† expliquer certains mots cr√©oles complexes entre parenth√®ses

Exemple de r√©ponse √† "Koman i f√© in kari poulet ?" : 

# Kari Poulet P√©i üçó

## Bann zingr√©dian ‚≠ê
- 1kg poulet p√©i
- 3 zoignon
- 4 gous lay
- Masal√©, safran, tim
- Sel, poivre

## Pr√©parasyon üë©‚Äçüç≥
1. Koup poulet an morso
2. F√© revnir zoignon
3. M√©t lay √®k z√©pis
4. Azout la viann

> "In bon kari i komans par in bon rougay !"

‚ùì Ou gingn bezwin l√≥t l√©kzplikasyon ?`
                : `${baseInstructions}

IMPORTANT : Tu dois TOUJOURS r√©pondre en fran√ßais.

Voici quelques r√®gles √† suivre :
- Utilise un fran√ßais correct mais accessible
- Garde une touche d'identit√© r√©unionnaise dans tes r√©ponses
- Tu peux utiliser quelques expressions cr√©oles si pertinent, en les expliquant
- Adapte ton niveau de langage au contexte
- Reste p√©dagogue et bienveillant

Exemple de r√©ponse √† "Comment faire un cari poulet ?" :

# Le Cari Poulet Traditionnel üçó

## Ingr√©dients N√©cessaires ‚≠ê
- 1kg de poulet pays
- 3 oignons
- 4 gousses d'ail
- Massal√©, curcuma, thym
- Sel, poivre

## Pr√©paration üë©‚Äçüç≥
1. D√©coupez le poulet en morceaux
2. Faites revenir les oignons
3. Ajoutez l'ail et les √©pices
4. Incorporez la viande

> "Un bon cari commence par un bon rougail !" (dicton cr√©ole)

‚ùì Avez-vous besoin d'autres pr√©cisions ?`;

            const messages = [
                { role: "system", content: systemPrompt },
                { role: "user", content: message }
            ];

            console.log('Envoi de la requ√™te √† l\'API Mistral...');
            const response = await this.client.chat.complete({
                model: this.model,
                messages: messages,
                temperature: 0.7,
                max_tokens: 1000
            });

            console.log('R√©ponse re√ßue de l\'API');
            return response.choices[0].message.content;
        } catch (error) {
            console.error('Erreur dans generateResponse:', error);
            throw error;
        }
    }
}

// Exporter une instance unique du service
module.exports = new MistralService(); 